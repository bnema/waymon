// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: internal/proto/mouse.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// EventType defines the type of input event
type EventType int32

const (
	EventType_EVENT_TYPE_UNSPECIFIED EventType = 0
	EventType_EVENT_TYPE_MOVE        EventType = 1
	EventType_EVENT_TYPE_CLICK       EventType = 2
	EventType_EVENT_TYPE_SCROLL      EventType = 3
	EventType_EVENT_TYPE_ENTER       EventType = 4
	EventType_EVENT_TYPE_LEAVE       EventType = 5
	EventType_EVENT_TYPE_KEY         EventType = 6
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0: "EVENT_TYPE_UNSPECIFIED",
		1: "EVENT_TYPE_MOVE",
		2: "EVENT_TYPE_CLICK",
		3: "EVENT_TYPE_SCROLL",
		4: "EVENT_TYPE_ENTER",
		5: "EVENT_TYPE_LEAVE",
		6: "EVENT_TYPE_KEY",
	}
	EventType_value = map[string]int32{
		"EVENT_TYPE_UNSPECIFIED": 0,
		"EVENT_TYPE_MOVE":        1,
		"EVENT_TYPE_CLICK":       2,
		"EVENT_TYPE_SCROLL":      3,
		"EVENT_TYPE_ENTER":       4,
		"EVENT_TYPE_LEAVE":       5,
		"EVENT_TYPE_KEY":         6,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_proto_mouse_proto_enumTypes[0].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_internal_proto_mouse_proto_enumTypes[0]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_internal_proto_mouse_proto_rawDescGZIP(), []int{0}
}

// MouseButton defines mouse button values
type MouseButton int32

const (
	MouseButton_MOUSE_BUTTON_UNSPECIFIED MouseButton = 0
	MouseButton_MOUSE_BUTTON_LEFT        MouseButton = 1
	MouseButton_MOUSE_BUTTON_RIGHT       MouseButton = 2
	MouseButton_MOUSE_BUTTON_MIDDLE      MouseButton = 3
	MouseButton_MOUSE_BUTTON_BACK        MouseButton = 4
	MouseButton_MOUSE_BUTTON_FORWARD     MouseButton = 5
)

// Enum value maps for MouseButton.
var (
	MouseButton_name = map[int32]string{
		0: "MOUSE_BUTTON_UNSPECIFIED",
		1: "MOUSE_BUTTON_LEFT",
		2: "MOUSE_BUTTON_RIGHT",
		3: "MOUSE_BUTTON_MIDDLE",
		4: "MOUSE_BUTTON_BACK",
		5: "MOUSE_BUTTON_FORWARD",
	}
	MouseButton_value = map[string]int32{
		"MOUSE_BUTTON_UNSPECIFIED": 0,
		"MOUSE_BUTTON_LEFT":        1,
		"MOUSE_BUTTON_RIGHT":       2,
		"MOUSE_BUTTON_MIDDLE":      3,
		"MOUSE_BUTTON_BACK":        4,
		"MOUSE_BUTTON_FORWARD":     5,
	}
)

func (x MouseButton) Enum() *MouseButton {
	p := new(MouseButton)
	*p = x
	return p
}

func (x MouseButton) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MouseButton) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_proto_mouse_proto_enumTypes[1].Descriptor()
}

func (MouseButton) Type() protoreflect.EnumType {
	return &file_internal_proto_mouse_proto_enumTypes[1]
}

func (x MouseButton) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MouseButton.Descriptor instead.
func (MouseButton) EnumDescriptor() ([]byte, []int) {
	return file_internal_proto_mouse_proto_rawDescGZIP(), []int{1}
}

// ScrollDirection defines scroll directions
type ScrollDirection int32

const (
	ScrollDirection_SCROLL_DIRECTION_UNSPECIFIED ScrollDirection = 0
	ScrollDirection_SCROLL_DIRECTION_UP          ScrollDirection = 1
	ScrollDirection_SCROLL_DIRECTION_DOWN        ScrollDirection = 2
	ScrollDirection_SCROLL_DIRECTION_LEFT        ScrollDirection = 3
	ScrollDirection_SCROLL_DIRECTION_RIGHT       ScrollDirection = 4
)

// Enum value maps for ScrollDirection.
var (
	ScrollDirection_name = map[int32]string{
		0: "SCROLL_DIRECTION_UNSPECIFIED",
		1: "SCROLL_DIRECTION_UP",
		2: "SCROLL_DIRECTION_DOWN",
		3: "SCROLL_DIRECTION_LEFT",
		4: "SCROLL_DIRECTION_RIGHT",
	}
	ScrollDirection_value = map[string]int32{
		"SCROLL_DIRECTION_UNSPECIFIED": 0,
		"SCROLL_DIRECTION_UP":          1,
		"SCROLL_DIRECTION_DOWN":        2,
		"SCROLL_DIRECTION_LEFT":        3,
		"SCROLL_DIRECTION_RIGHT":       4,
	}
)

func (x ScrollDirection) Enum() *ScrollDirection {
	p := new(ScrollDirection)
	*p = x
	return p
}

func (x ScrollDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScrollDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_proto_mouse_proto_enumTypes[2].Descriptor()
}

func (ScrollDirection) Type() protoreflect.EnumType {
	return &file_internal_proto_mouse_proto_enumTypes[2]
}

func (x ScrollDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScrollDirection.Descriptor instead.
func (ScrollDirection) EnumDescriptor() ([]byte, []int) {
	return file_internal_proto_mouse_proto_rawDescGZIP(), []int{2}
}

// IPC Message types for inter-process communication
type IPCMessageType int32

const (
	IPCMessageType_IPC_MESSAGE_TYPE_UNSPECIFIED     IPCMessageType = 0
	IPCMessageType_IPC_MESSAGE_TYPE_SWITCH          IPCMessageType = 1
	IPCMessageType_IPC_MESSAGE_TYPE_STATUS          IPCMessageType = 2
	IPCMessageType_IPC_MESSAGE_TYPE_STATUS_RESPONSE IPCMessageType = 3
	IPCMessageType_IPC_MESSAGE_TYPE_ERROR           IPCMessageType = 4
	IPCMessageType_IPC_MESSAGE_TYPE_RELEASE         IPCMessageType = 5
	IPCMessageType_IPC_MESSAGE_TYPE_CONNECT         IPCMessageType = 6
)

// Enum value maps for IPCMessageType.
var (
	IPCMessageType_name = map[int32]string{
		0: "IPC_MESSAGE_TYPE_UNSPECIFIED",
		1: "IPC_MESSAGE_TYPE_SWITCH",
		2: "IPC_MESSAGE_TYPE_STATUS",
		3: "IPC_MESSAGE_TYPE_STATUS_RESPONSE",
		4: "IPC_MESSAGE_TYPE_ERROR",
		5: "IPC_MESSAGE_TYPE_RELEASE",
		6: "IPC_MESSAGE_TYPE_CONNECT",
	}
	IPCMessageType_value = map[string]int32{
		"IPC_MESSAGE_TYPE_UNSPECIFIED":     0,
		"IPC_MESSAGE_TYPE_SWITCH":          1,
		"IPC_MESSAGE_TYPE_STATUS":          2,
		"IPC_MESSAGE_TYPE_STATUS_RESPONSE": 3,
		"IPC_MESSAGE_TYPE_ERROR":           4,
		"IPC_MESSAGE_TYPE_RELEASE":         5,
		"IPC_MESSAGE_TYPE_CONNECT":         6,
	}
)

func (x IPCMessageType) Enum() *IPCMessageType {
	p := new(IPCMessageType)
	*p = x
	return p
}

func (x IPCMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IPCMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_proto_mouse_proto_enumTypes[3].Descriptor()
}

func (IPCMessageType) Type() protoreflect.EnumType {
	return &file_internal_proto_mouse_proto_enumTypes[3]
}

func (x IPCMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IPCMessageType.Descriptor instead.
func (IPCMessageType) EnumDescriptor() ([]byte, []int) {
	return file_internal_proto_mouse_proto_rawDescGZIP(), []int{3}
}

// SwitchAction defines what action to take
type SwitchAction int32

const (
	SwitchAction_SWITCH_ACTION_UNSPECIFIED SwitchAction = 0
	SwitchAction_SWITCH_ACTION_NEXT        SwitchAction = 1 // Switch to next computer in rotation
	SwitchAction_SWITCH_ACTION_PREVIOUS    SwitchAction = 2 // Switch to previous computer in rotation
	SwitchAction_SWITCH_ACTION_ENABLE      SwitchAction = 3 // Enable mouse sharing (legacy)
	SwitchAction_SWITCH_ACTION_DISABLE     SwitchAction = 4 // Disable mouse sharing (legacy)
)

// Enum value maps for SwitchAction.
var (
	SwitchAction_name = map[int32]string{
		0: "SWITCH_ACTION_UNSPECIFIED",
		1: "SWITCH_ACTION_NEXT",
		2: "SWITCH_ACTION_PREVIOUS",
		3: "SWITCH_ACTION_ENABLE",
		4: "SWITCH_ACTION_DISABLE",
	}
	SwitchAction_value = map[string]int32{
		"SWITCH_ACTION_UNSPECIFIED": 0,
		"SWITCH_ACTION_NEXT":        1,
		"SWITCH_ACTION_PREVIOUS":    2,
		"SWITCH_ACTION_ENABLE":      3,
		"SWITCH_ACTION_DISABLE":     4,
	}
)

func (x SwitchAction) Enum() *SwitchAction {
	p := new(SwitchAction)
	*p = x
	return p
}

func (x SwitchAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SwitchAction) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_proto_mouse_proto_enumTypes[4].Descriptor()
}

func (SwitchAction) Type() protoreflect.EnumType {
	return &file_internal_proto_mouse_proto_enumTypes[4]
}

func (x SwitchAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SwitchAction.Descriptor instead.
func (SwitchAction) EnumDescriptor() ([]byte, []int) {
	return file_internal_proto_mouse_proto_rawDescGZIP(), []int{4}
}

// MouseEvent represents a mouse event
type MouseEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          EventType              `protobuf:"varint,1,opt,name=type,proto3,enum=waymon.EventType" json:"type,omitempty"`
	X             float64                `protobuf:"fixed64,2,opt,name=x,proto3" json:"x,omitempty"`
	Y             float64                `protobuf:"fixed64,3,opt,name=y,proto3" json:"y,omitempty"`
	Button        MouseButton            `protobuf:"varint,4,opt,name=button,proto3,enum=waymon.MouseButton" json:"button,omitempty"`
	Direction     ScrollDirection        `protobuf:"varint,5,opt,name=direction,proto3,enum=waymon.ScrollDirection" json:"direction,omitempty"`
	TimestampMs   int64                  `protobuf:"varint,6,opt,name=timestamp_ms,json=timestampMs,proto3" json:"timestamp_ms,omitempty"`
	IsPressed     bool                   `protobuf:"varint,7,opt,name=is_pressed,json=isPressed,proto3" json:"is_pressed,omitempty"` // For click events: true = press, false = release
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MouseEvent) Reset() {
	*x = MouseEvent{}
	mi := &file_internal_proto_mouse_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MouseEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MouseEvent) ProtoMessage() {}

func (x *MouseEvent) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_mouse_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MouseEvent.ProtoReflect.Descriptor instead.
func (*MouseEvent) Descriptor() ([]byte, []int) {
	return file_internal_proto_mouse_proto_rawDescGZIP(), []int{0}
}

func (x *MouseEvent) GetType() EventType {
	if x != nil {
		return x.Type
	}
	return EventType_EVENT_TYPE_UNSPECIFIED
}

func (x *MouseEvent) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *MouseEvent) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *MouseEvent) GetButton() MouseButton {
	if x != nil {
		return x.Button
	}
	return MouseButton_MOUSE_BUTTON_UNSPECIFIED
}

func (x *MouseEvent) GetDirection() ScrollDirection {
	if x != nil {
		return x.Direction
	}
	return ScrollDirection_SCROLL_DIRECTION_UNSPECIFIED
}

func (x *MouseEvent) GetTimestampMs() int64 {
	if x != nil {
		return x.TimestampMs
	}
	return 0
}

func (x *MouseEvent) GetIsPressed() bool {
	if x != nil {
		return x.IsPressed
	}
	return false
}

// KeyEvent represents a keyboard event
type KeyEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Keycode       uint32                 `protobuf:"varint,1,opt,name=keycode,proto3" json:"keycode,omitempty"`                      // Linux event code (e.g., KEY_A = 30)
	Key           string                 `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`                               // Human-readable key name (e.g., "a", "space", "ctrl")
	IsPressed     bool                   `protobuf:"varint,3,opt,name=is_pressed,json=isPressed,proto3" json:"is_pressed,omitempty"` // true = key down, false = key up
	Ctrl          bool                   `protobuf:"varint,4,opt,name=ctrl,proto3" json:"ctrl,omitempty"`                            // Modifier keys
	Alt           bool                   `protobuf:"varint,5,opt,name=alt,proto3" json:"alt,omitempty"`
	Shift         bool                   `protobuf:"varint,6,opt,name=shift,proto3" json:"shift,omitempty"`
	Meta          bool                   `protobuf:"varint,7,opt,name=meta,proto3" json:"meta,omitempty"` // Windows/Command key
	TimestampMs   int64                  `protobuf:"varint,8,opt,name=timestamp_ms,json=timestampMs,proto3" json:"timestamp_ms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyEvent) Reset() {
	*x = KeyEvent{}
	mi := &file_internal_proto_mouse_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyEvent) ProtoMessage() {}

func (x *KeyEvent) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_mouse_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyEvent.ProtoReflect.Descriptor instead.
func (*KeyEvent) Descriptor() ([]byte, []int) {
	return file_internal_proto_mouse_proto_rawDescGZIP(), []int{1}
}

func (x *KeyEvent) GetKeycode() uint32 {
	if x != nil {
		return x.Keycode
	}
	return 0
}

func (x *KeyEvent) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyEvent) GetIsPressed() bool {
	if x != nil {
		return x.IsPressed
	}
	return false
}

func (x *KeyEvent) GetCtrl() bool {
	if x != nil {
		return x.Ctrl
	}
	return false
}

func (x *KeyEvent) GetAlt() bool {
	if x != nil {
		return x.Alt
	}
	return false
}

func (x *KeyEvent) GetShift() bool {
	if x != nil {
		return x.Shift
	}
	return false
}

func (x *KeyEvent) GetMeta() bool {
	if x != nil {
		return x.Meta
	}
	return false
}

func (x *KeyEvent) GetTimestampMs() int64 {
	if x != nil {
		return x.TimestampMs
	}
	return 0
}

// InputEvent wraps both mouse and keyboard events
type InputEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Event:
	//
	//	*InputEvent_Mouse
	//	*InputEvent_Key
	Event         isInputEvent_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InputEvent) Reset() {
	*x = InputEvent{}
	mi := &file_internal_proto_mouse_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InputEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputEvent) ProtoMessage() {}

func (x *InputEvent) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_mouse_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputEvent.ProtoReflect.Descriptor instead.
func (*InputEvent) Descriptor() ([]byte, []int) {
	return file_internal_proto_mouse_proto_rawDescGZIP(), []int{2}
}

func (x *InputEvent) GetEvent() isInputEvent_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *InputEvent) GetMouse() *MouseEvent {
	if x != nil {
		if x, ok := x.Event.(*InputEvent_Mouse); ok {
			return x.Mouse
		}
	}
	return nil
}

func (x *InputEvent) GetKey() *KeyEvent {
	if x != nil {
		if x, ok := x.Event.(*InputEvent_Key); ok {
			return x.Key
		}
	}
	return nil
}

type isInputEvent_Event interface {
	isInputEvent_Event()
}

type InputEvent_Mouse struct {
	Mouse *MouseEvent `protobuf:"bytes,1,opt,name=mouse,proto3,oneof"`
}

type InputEvent_Key struct {
	Key *KeyEvent `protobuf:"bytes,2,opt,name=key,proto3,oneof"`
}

func (*InputEvent_Mouse) isInputEvent_Event() {}

func (*InputEvent_Key) isInputEvent_Event() {}

// EventBatch allows sending multiple events at once for efficiency
type EventBatch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Events        []*InputEvent          `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventBatch) Reset() {
	*x = EventBatch{}
	mi := &file_internal_proto_mouse_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBatch) ProtoMessage() {}

func (x *EventBatch) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_mouse_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBatch.ProtoReflect.Descriptor instead.
func (*EventBatch) Descriptor() ([]byte, []int) {
	return file_internal_proto_mouse_proto_rawDescGZIP(), []int{3}
}

func (x *EventBatch) GetEvents() []*InputEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

// IPCMessage represents an IPC message
type IPCMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Type  IPCMessageType         `protobuf:"varint,1,opt,name=type,proto3,enum=waymon.IPCMessageType" json:"type,omitempty"`
	// Types that are valid to be assigned to Payload:
	//
	//	*IPCMessage_SwitchCommand
	//	*IPCMessage_StatusQuery
	//	*IPCMessage_StatusResponse
	//	*IPCMessage_ErrorResponse
	//	*IPCMessage_ReleaseCommand
	//	*IPCMessage_ConnectCommand
	Payload       isIPCMessage_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IPCMessage) Reset() {
	*x = IPCMessage{}
	mi := &file_internal_proto_mouse_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IPCMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPCMessage) ProtoMessage() {}

func (x *IPCMessage) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_mouse_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPCMessage.ProtoReflect.Descriptor instead.
func (*IPCMessage) Descriptor() ([]byte, []int) {
	return file_internal_proto_mouse_proto_rawDescGZIP(), []int{4}
}

func (x *IPCMessage) GetType() IPCMessageType {
	if x != nil {
		return x.Type
	}
	return IPCMessageType_IPC_MESSAGE_TYPE_UNSPECIFIED
}

func (x *IPCMessage) GetPayload() isIPCMessage_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *IPCMessage) GetSwitchCommand() *SwitchCommand {
	if x != nil {
		if x, ok := x.Payload.(*IPCMessage_SwitchCommand); ok {
			return x.SwitchCommand
		}
	}
	return nil
}

func (x *IPCMessage) GetStatusQuery() *StatusQuery {
	if x != nil {
		if x, ok := x.Payload.(*IPCMessage_StatusQuery); ok {
			return x.StatusQuery
		}
	}
	return nil
}

func (x *IPCMessage) GetStatusResponse() *StatusResponse {
	if x != nil {
		if x, ok := x.Payload.(*IPCMessage_StatusResponse); ok {
			return x.StatusResponse
		}
	}
	return nil
}

func (x *IPCMessage) GetErrorResponse() *ErrorResponse {
	if x != nil {
		if x, ok := x.Payload.(*IPCMessage_ErrorResponse); ok {
			return x.ErrorResponse
		}
	}
	return nil
}

func (x *IPCMessage) GetReleaseCommand() *ReleaseCommand {
	if x != nil {
		if x, ok := x.Payload.(*IPCMessage_ReleaseCommand); ok {
			return x.ReleaseCommand
		}
	}
	return nil
}

func (x *IPCMessage) GetConnectCommand() *ConnectCommand {
	if x != nil {
		if x, ok := x.Payload.(*IPCMessage_ConnectCommand); ok {
			return x.ConnectCommand
		}
	}
	return nil
}

type isIPCMessage_Payload interface {
	isIPCMessage_Payload()
}

type IPCMessage_SwitchCommand struct {
	SwitchCommand *SwitchCommand `protobuf:"bytes,2,opt,name=switch_command,json=switchCommand,proto3,oneof"`
}

type IPCMessage_StatusQuery struct {
	StatusQuery *StatusQuery `protobuf:"bytes,3,opt,name=status_query,json=statusQuery,proto3,oneof"`
}

type IPCMessage_StatusResponse struct {
	StatusResponse *StatusResponse `protobuf:"bytes,4,opt,name=status_response,json=statusResponse,proto3,oneof"`
}

type IPCMessage_ErrorResponse struct {
	ErrorResponse *ErrorResponse `protobuf:"bytes,5,opt,name=error_response,json=errorResponse,proto3,oneof"`
}

type IPCMessage_ReleaseCommand struct {
	ReleaseCommand *ReleaseCommand `protobuf:"bytes,6,opt,name=release_command,json=releaseCommand,proto3,oneof"`
}

type IPCMessage_ConnectCommand struct {
	ConnectCommand *ConnectCommand `protobuf:"bytes,7,opt,name=connect_command,json=connectCommand,proto3,oneof"`
}

func (*IPCMessage_SwitchCommand) isIPCMessage_Payload() {}

func (*IPCMessage_StatusQuery) isIPCMessage_Payload() {}

func (*IPCMessage_StatusResponse) isIPCMessage_Payload() {}

func (*IPCMessage_ErrorResponse) isIPCMessage_Payload() {}

func (*IPCMessage_ReleaseCommand) isIPCMessage_Payload() {}

func (*IPCMessage_ConnectCommand) isIPCMessage_Payload() {}

// SwitchCommand represents a switch command
type SwitchCommand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enable        *bool                  `protobuf:"varint,1,opt,name=enable,proto3,oneof" json:"enable,omitempty"`                    // Deprecated: use switch_action instead
	Action        SwitchAction           `protobuf:"varint,2,opt,name=action,proto3,enum=waymon.SwitchAction" json:"action,omitempty"` // The action to perform
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SwitchCommand) Reset() {
	*x = SwitchCommand{}
	mi := &file_internal_proto_mouse_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwitchCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchCommand) ProtoMessage() {}

func (x *SwitchCommand) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_mouse_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchCommand.ProtoReflect.Descriptor instead.
func (*SwitchCommand) Descriptor() ([]byte, []int) {
	return file_internal_proto_mouse_proto_rawDescGZIP(), []int{5}
}

func (x *SwitchCommand) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *SwitchCommand) GetAction() SwitchAction {
	if x != nil {
		return x.Action
	}
	return SwitchAction_SWITCH_ACTION_UNSPECIFIED
}

// StatusQuery represents a status query (no fields needed)
type StatusQuery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusQuery) Reset() {
	*x = StatusQuery{}
	mi := &file_internal_proto_mouse_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusQuery) ProtoMessage() {}

func (x *StatusQuery) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_mouse_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusQuery.ProtoReflect.Descriptor instead.
func (*StatusQuery) Descriptor() ([]byte, []int) {
	return file_internal_proto_mouse_proto_rawDescGZIP(), []int{6}
}

// StatusResponse represents a status response
type StatusResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Active          bool                   `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`                                          // Whether mouse sharing is currently active
	Connected       bool                   `protobuf:"varint,2,opt,name=connected,proto3" json:"connected,omitempty"`                                    // Whether connected to server
	ServerHost      string                 `protobuf:"bytes,3,opt,name=server_host,json=serverHost,proto3" json:"server_host,omitempty"`                 // Server address if connected
	CurrentComputer int32                  `protobuf:"varint,4,opt,name=current_computer,json=currentComputer,proto3" json:"current_computer,omitempty"` // Index of currently active computer (0 = server)
	TotalComputers  int32                  `protobuf:"varint,5,opt,name=total_computers,json=totalComputers,proto3" json:"total_computers,omitempty"`    // Total number of computers in rotation
	ComputerNames   []string               `protobuf:"bytes,6,rep,name=computer_names,json=computerNames,proto3" json:"computer_names,omitempty"`        // Names/IDs of all computers in rotation
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	mi := &file_internal_proto_mouse_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_mouse_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_internal_proto_mouse_proto_rawDescGZIP(), []int{7}
}

func (x *StatusResponse) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *StatusResponse) GetConnected() bool {
	if x != nil {
		return x.Connected
	}
	return false
}

func (x *StatusResponse) GetServerHost() string {
	if x != nil {
		return x.ServerHost
	}
	return ""
}

func (x *StatusResponse) GetCurrentComputer() int32 {
	if x != nil {
		return x.CurrentComputer
	}
	return 0
}

func (x *StatusResponse) GetTotalComputers() int32 {
	if x != nil {
		return x.TotalComputers
	}
	return 0
}

func (x *StatusResponse) GetComputerNames() []string {
	if x != nil {
		return x.ComputerNames
	}
	return nil
}

// ErrorResponse represents an error response
type ErrorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         string                 `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorResponse) Reset() {
	*x = ErrorResponse{}
	mi := &file_internal_proto_mouse_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResponse) ProtoMessage() {}

func (x *ErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_mouse_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResponse.ProtoReflect.Descriptor instead.
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return file_internal_proto_mouse_proto_rawDescGZIP(), []int{8}
}

func (x *ErrorResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// ReleaseCommand releases control back to the server (local)
type ReleaseCommand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReleaseCommand) Reset() {
	*x = ReleaseCommand{}
	mi := &file_internal_proto_mouse_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReleaseCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseCommand) ProtoMessage() {}

func (x *ReleaseCommand) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_mouse_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseCommand.ProtoReflect.Descriptor instead.
func (*ReleaseCommand) Descriptor() ([]byte, []int) {
	return file_internal_proto_mouse_proto_rawDescGZIP(), []int{9}
}

// ConnectCommand connects to a specific computer by slot number
type ConnectCommand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Slot          int32                  `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"` // Slot number (1-5)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectCommand) Reset() {
	*x = ConnectCommand{}
	mi := &file_internal_proto_mouse_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectCommand) ProtoMessage() {}

func (x *ConnectCommand) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_mouse_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectCommand.ProtoReflect.Descriptor instead.
func (*ConnectCommand) Descriptor() ([]byte, []int) {
	return file_internal_proto_mouse_proto_rawDescGZIP(), []int{10}
}

func (x *ConnectCommand) GetSlot() int32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

var File_internal_proto_mouse_proto protoreflect.FileDescriptor

const file_internal_proto_mouse_proto_rawDesc = "" +
	"\n" +
	"\x1ainternal/proto/mouse.proto\x12\x06waymon\"\xf5\x01\n" +
	"\n" +
	"MouseEvent\x12%\n" +
	"\x04type\x18\x01 \x01(\x0e2\x11.waymon.EventTypeR\x04type\x12\f\n" +
	"\x01x\x18\x02 \x01(\x01R\x01x\x12\f\n" +
	"\x01y\x18\x03 \x01(\x01R\x01y\x12+\n" +
	"\x06button\x18\x04 \x01(\x0e2\x13.waymon.MouseButtonR\x06button\x125\n" +
	"\tdirection\x18\x05 \x01(\x0e2\x17.waymon.ScrollDirectionR\tdirection\x12!\n" +
	"\ftimestamp_ms\x18\x06 \x01(\x03R\vtimestampMs\x12\x1d\n" +
	"\n" +
	"is_pressed\x18\a \x01(\bR\tisPressed\"\xc8\x01\n" +
	"\bKeyEvent\x12\x18\n" +
	"\akeycode\x18\x01 \x01(\rR\akeycode\x12\x10\n" +
	"\x03key\x18\x02 \x01(\tR\x03key\x12\x1d\n" +
	"\n" +
	"is_pressed\x18\x03 \x01(\bR\tisPressed\x12\x12\n" +
	"\x04ctrl\x18\x04 \x01(\bR\x04ctrl\x12\x10\n" +
	"\x03alt\x18\x05 \x01(\bR\x03alt\x12\x14\n" +
	"\x05shift\x18\x06 \x01(\bR\x05shift\x12\x12\n" +
	"\x04meta\x18\a \x01(\bR\x04meta\x12!\n" +
	"\ftimestamp_ms\x18\b \x01(\x03R\vtimestampMs\"g\n" +
	"\n" +
	"InputEvent\x12*\n" +
	"\x05mouse\x18\x01 \x01(\v2\x12.waymon.MouseEventH\x00R\x05mouse\x12$\n" +
	"\x03key\x18\x02 \x01(\v2\x10.waymon.KeyEventH\x00R\x03keyB\a\n" +
	"\x05event\"8\n" +
	"\n" +
	"EventBatch\x12*\n" +
	"\x06events\x18\x01 \x03(\v2\x12.waymon.InputEventR\x06events\"\xc6\x03\n" +
	"\n" +
	"IPCMessage\x12*\n" +
	"\x04type\x18\x01 \x01(\x0e2\x16.waymon.IPCMessageTypeR\x04type\x12>\n" +
	"\x0eswitch_command\x18\x02 \x01(\v2\x15.waymon.SwitchCommandH\x00R\rswitchCommand\x128\n" +
	"\fstatus_query\x18\x03 \x01(\v2\x13.waymon.StatusQueryH\x00R\vstatusQuery\x12A\n" +
	"\x0fstatus_response\x18\x04 \x01(\v2\x16.waymon.StatusResponseH\x00R\x0estatusResponse\x12>\n" +
	"\x0eerror_response\x18\x05 \x01(\v2\x15.waymon.ErrorResponseH\x00R\rerrorResponse\x12A\n" +
	"\x0frelease_command\x18\x06 \x01(\v2\x16.waymon.ReleaseCommandH\x00R\x0ereleaseCommand\x12A\n" +
	"\x0fconnect_command\x18\a \x01(\v2\x16.waymon.ConnectCommandH\x00R\x0econnectCommandB\t\n" +
	"\apayload\"e\n" +
	"\rSwitchCommand\x12\x1b\n" +
	"\x06enable\x18\x01 \x01(\bH\x00R\x06enable\x88\x01\x01\x12,\n" +
	"\x06action\x18\x02 \x01(\x0e2\x14.waymon.SwitchActionR\x06actionB\t\n" +
	"\a_enable\"\r\n" +
	"\vStatusQuery\"\xe2\x01\n" +
	"\x0eStatusResponse\x12\x16\n" +
	"\x06active\x18\x01 \x01(\bR\x06active\x12\x1c\n" +
	"\tconnected\x18\x02 \x01(\bR\tconnected\x12\x1f\n" +
	"\vserver_host\x18\x03 \x01(\tR\n" +
	"serverHost\x12)\n" +
	"\x10current_computer\x18\x04 \x01(\x05R\x0fcurrentComputer\x12'\n" +
	"\x0ftotal_computers\x18\x05 \x01(\x05R\x0etotalComputers\x12%\n" +
	"\x0ecomputer_names\x18\x06 \x03(\tR\rcomputerNames\"%\n" +
	"\rErrorResponse\x12\x14\n" +
	"\x05error\x18\x01 \x01(\tR\x05error\"\x10\n" +
	"\x0eReleaseCommand\"$\n" +
	"\x0eConnectCommand\x12\x12\n" +
	"\x04slot\x18\x01 \x01(\x05R\x04slot*\xa9\x01\n" +
	"\tEventType\x12\x1a\n" +
	"\x16EVENT_TYPE_UNSPECIFIED\x10\x00\x12\x13\n" +
	"\x0fEVENT_TYPE_MOVE\x10\x01\x12\x14\n" +
	"\x10EVENT_TYPE_CLICK\x10\x02\x12\x15\n" +
	"\x11EVENT_TYPE_SCROLL\x10\x03\x12\x14\n" +
	"\x10EVENT_TYPE_ENTER\x10\x04\x12\x14\n" +
	"\x10EVENT_TYPE_LEAVE\x10\x05\x12\x12\n" +
	"\x0eEVENT_TYPE_KEY\x10\x06*\xa4\x01\n" +
	"\vMouseButton\x12\x1c\n" +
	"\x18MOUSE_BUTTON_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11MOUSE_BUTTON_LEFT\x10\x01\x12\x16\n" +
	"\x12MOUSE_BUTTON_RIGHT\x10\x02\x12\x17\n" +
	"\x13MOUSE_BUTTON_MIDDLE\x10\x03\x12\x15\n" +
	"\x11MOUSE_BUTTON_BACK\x10\x04\x12\x18\n" +
	"\x14MOUSE_BUTTON_FORWARD\x10\x05*\x9e\x01\n" +
	"\x0fScrollDirection\x12 \n" +
	"\x1cSCROLL_DIRECTION_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13SCROLL_DIRECTION_UP\x10\x01\x12\x19\n" +
	"\x15SCROLL_DIRECTION_DOWN\x10\x02\x12\x19\n" +
	"\x15SCROLL_DIRECTION_LEFT\x10\x03\x12\x1a\n" +
	"\x16SCROLL_DIRECTION_RIGHT\x10\x04*\xea\x01\n" +
	"\x0eIPCMessageType\x12 \n" +
	"\x1cIPC_MESSAGE_TYPE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17IPC_MESSAGE_TYPE_SWITCH\x10\x01\x12\x1b\n" +
	"\x17IPC_MESSAGE_TYPE_STATUS\x10\x02\x12$\n" +
	" IPC_MESSAGE_TYPE_STATUS_RESPONSE\x10\x03\x12\x1a\n" +
	"\x16IPC_MESSAGE_TYPE_ERROR\x10\x04\x12\x1c\n" +
	"\x18IPC_MESSAGE_TYPE_RELEASE\x10\x05\x12\x1c\n" +
	"\x18IPC_MESSAGE_TYPE_CONNECT\x10\x06*\x96\x01\n" +
	"\fSwitchAction\x12\x1d\n" +
	"\x19SWITCH_ACTION_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12SWITCH_ACTION_NEXT\x10\x01\x12\x1a\n" +
	"\x16SWITCH_ACTION_PREVIOUS\x10\x02\x12\x18\n" +
	"\x14SWITCH_ACTION_ENABLE\x10\x03\x12\x19\n" +
	"\x15SWITCH_ACTION_DISABLE\x10\x04B(Z&github.com/bnema/waymon/internal/protob\x06proto3"

var (
	file_internal_proto_mouse_proto_rawDescOnce sync.Once
	file_internal_proto_mouse_proto_rawDescData []byte
)

func file_internal_proto_mouse_proto_rawDescGZIP() []byte {
	file_internal_proto_mouse_proto_rawDescOnce.Do(func() {
		file_internal_proto_mouse_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_internal_proto_mouse_proto_rawDesc), len(file_internal_proto_mouse_proto_rawDesc)))
	})
	return file_internal_proto_mouse_proto_rawDescData
}

var file_internal_proto_mouse_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_internal_proto_mouse_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_internal_proto_mouse_proto_goTypes = []any{
	(EventType)(0),         // 0: waymon.EventType
	(MouseButton)(0),       // 1: waymon.MouseButton
	(ScrollDirection)(0),   // 2: waymon.ScrollDirection
	(IPCMessageType)(0),    // 3: waymon.IPCMessageType
	(SwitchAction)(0),      // 4: waymon.SwitchAction
	(*MouseEvent)(nil),     // 5: waymon.MouseEvent
	(*KeyEvent)(nil),       // 6: waymon.KeyEvent
	(*InputEvent)(nil),     // 7: waymon.InputEvent
	(*EventBatch)(nil),     // 8: waymon.EventBatch
	(*IPCMessage)(nil),     // 9: waymon.IPCMessage
	(*SwitchCommand)(nil),  // 10: waymon.SwitchCommand
	(*StatusQuery)(nil),    // 11: waymon.StatusQuery
	(*StatusResponse)(nil), // 12: waymon.StatusResponse
	(*ErrorResponse)(nil),  // 13: waymon.ErrorResponse
	(*ReleaseCommand)(nil), // 14: waymon.ReleaseCommand
	(*ConnectCommand)(nil), // 15: waymon.ConnectCommand
}
var file_internal_proto_mouse_proto_depIdxs = []int32{
	0,  // 0: waymon.MouseEvent.type:type_name -> waymon.EventType
	1,  // 1: waymon.MouseEvent.button:type_name -> waymon.MouseButton
	2,  // 2: waymon.MouseEvent.direction:type_name -> waymon.ScrollDirection
	5,  // 3: waymon.InputEvent.mouse:type_name -> waymon.MouseEvent
	6,  // 4: waymon.InputEvent.key:type_name -> waymon.KeyEvent
	7,  // 5: waymon.EventBatch.events:type_name -> waymon.InputEvent
	3,  // 6: waymon.IPCMessage.type:type_name -> waymon.IPCMessageType
	10, // 7: waymon.IPCMessage.switch_command:type_name -> waymon.SwitchCommand
	11, // 8: waymon.IPCMessage.status_query:type_name -> waymon.StatusQuery
	12, // 9: waymon.IPCMessage.status_response:type_name -> waymon.StatusResponse
	13, // 10: waymon.IPCMessage.error_response:type_name -> waymon.ErrorResponse
	14, // 11: waymon.IPCMessage.release_command:type_name -> waymon.ReleaseCommand
	15, // 12: waymon.IPCMessage.connect_command:type_name -> waymon.ConnectCommand
	4,  // 13: waymon.SwitchCommand.action:type_name -> waymon.SwitchAction
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_internal_proto_mouse_proto_init() }
func file_internal_proto_mouse_proto_init() {
	if File_internal_proto_mouse_proto != nil {
		return
	}
	file_internal_proto_mouse_proto_msgTypes[2].OneofWrappers = []any{
		(*InputEvent_Mouse)(nil),
		(*InputEvent_Key)(nil),
	}
	file_internal_proto_mouse_proto_msgTypes[4].OneofWrappers = []any{
		(*IPCMessage_SwitchCommand)(nil),
		(*IPCMessage_StatusQuery)(nil),
		(*IPCMessage_StatusResponse)(nil),
		(*IPCMessage_ErrorResponse)(nil),
		(*IPCMessage_ReleaseCommand)(nil),
		(*IPCMessage_ConnectCommand)(nil),
	}
	file_internal_proto_mouse_proto_msgTypes[5].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_internal_proto_mouse_proto_rawDesc), len(file_internal_proto_mouse_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_internal_proto_mouse_proto_goTypes,
		DependencyIndexes: file_internal_proto_mouse_proto_depIdxs,
		EnumInfos:         file_internal_proto_mouse_proto_enumTypes,
		MessageInfos:      file_internal_proto_mouse_proto_msgTypes,
	}.Build()
	File_internal_proto_mouse_proto = out.File
	file_internal_proto_mouse_proto_goTypes = nil
	file_internal_proto_mouse_proto_depIdxs = nil
}

syntax = "proto3";

package waymon;

option go_package = "github.com/bnema/waymon/internal/proto";

// EventType defines the type of input event
enum EventType {
  EVENT_TYPE_UNSPECIFIED = 0;
  EVENT_TYPE_MOVE = 1;
  EVENT_TYPE_CLICK = 2;
  EVENT_TYPE_SCROLL = 3;
  EVENT_TYPE_ENTER = 4;
  EVENT_TYPE_LEAVE = 5;
  EVENT_TYPE_KEY = 6;
}

// MouseButton defines mouse button values
enum MouseButton {
  MOUSE_BUTTON_UNSPECIFIED = 0;
  MOUSE_BUTTON_LEFT = 1;
  MOUSE_BUTTON_RIGHT = 2;
  MOUSE_BUTTON_MIDDLE = 3;
  MOUSE_BUTTON_BACK = 4;
  MOUSE_BUTTON_FORWARD = 5;
}

// ScrollDirection defines scroll directions
enum ScrollDirection {
  SCROLL_DIRECTION_UNSPECIFIED = 0;
  SCROLL_DIRECTION_UP = 1;
  SCROLL_DIRECTION_DOWN = 2;
  SCROLL_DIRECTION_LEFT = 3;
  SCROLL_DIRECTION_RIGHT = 4;
}

// MouseEvent represents a mouse event
message MouseEvent {
  EventType type = 1;
  double x = 2;
  double y = 3;
  MouseButton button = 4;
  ScrollDirection direction = 5;
  int64 timestamp_ms = 6;
  bool is_pressed = 7; // For click events: true = press, false = release
}

// KeyEvent represents a keyboard event
message KeyEvent {
  uint32 keycode = 1;     // Linux event code (e.g., KEY_A = 30)
  string key = 2;         // Human-readable key name (e.g., "a", "space", "ctrl")
  bool is_pressed = 3;    // true = key down, false = key up
  bool ctrl = 4;          // Modifier keys
  bool alt = 5;
  bool shift = 6;
  bool meta = 7;          // Windows/Command key
  int64 timestamp_ms = 8;
}

// InputEvent wraps both mouse and keyboard events
message InputEvent {
  oneof event {
    MouseEvent mouse = 1;
    KeyEvent key = 2;
  }
}

// EventBatch allows sending multiple events at once for efficiency
message EventBatch {
  repeated InputEvent events = 1;
}

// IPC Message types for inter-process communication
enum IPCMessageType {
  IPC_MESSAGE_TYPE_UNSPECIFIED = 0;
  IPC_MESSAGE_TYPE_SWITCH = 1;
  IPC_MESSAGE_TYPE_STATUS = 2;
  IPC_MESSAGE_TYPE_STATUS_RESPONSE = 3;
  IPC_MESSAGE_TYPE_ERROR = 4;
  IPC_MESSAGE_TYPE_RELEASE = 5;
  IPC_MESSAGE_TYPE_CONNECT = 6;
}

// IPCMessage represents an IPC message
message IPCMessage {
  IPCMessageType type = 1;
  oneof payload {
    SwitchCommand switch_command = 2;
    StatusQuery status_query = 3;
    StatusResponse status_response = 4;
    ErrorResponse error_response = 5;
    ReleaseCommand release_command = 6;
    ConnectCommand connect_command = 7;
  }
}

// SwitchCommand represents a switch command
message SwitchCommand {
  optional bool enable = 1; // Deprecated: use switch_action instead
  SwitchAction action = 2;   // The action to perform
}

// SwitchAction defines what action to take
enum SwitchAction {
  SWITCH_ACTION_UNSPECIFIED = 0;
  SWITCH_ACTION_NEXT = 1;        // Switch to next computer in rotation
  SWITCH_ACTION_PREVIOUS = 2;    // Switch to previous computer in rotation
  SWITCH_ACTION_ENABLE = 3;      // Enable mouse sharing (legacy)
  SWITCH_ACTION_DISABLE = 4;     // Disable mouse sharing (legacy)
}

// StatusQuery represents a status query (no fields needed)
message StatusQuery {
}

// StatusResponse represents a status response
message StatusResponse {
  bool active = 1;              // Whether mouse sharing is currently active
  bool connected = 2;           // Whether connected to server
  string server_host = 3;       // Server address if connected
  int32 current_computer = 4;   // Index of currently active computer (0 = server)
  int32 total_computers = 5;    // Total number of computers in rotation
  repeated string computer_names = 6; // Names/IDs of all computers in rotation
}

// ErrorResponse represents an error response
message ErrorResponse {
  string error = 1;
}

// ReleaseCommand releases control back to the server (local)
message ReleaseCommand {
}

// ConnectCommand connects to a specific computer by slot number
message ConnectCommand {
  int32 slot = 1; // Slot number (1-5)
}
// Code generated by tools/generate.go. DO NOT EDIT.
// Source: wlr_output_management_unstable_v1

// Package output_management provides Go bindings for the wlr_output_management_unstable_v1 Wayland protocol.
//
// protocol to configure output devices
package output_management

import (
	"context"
	"fmt"
)

// Constants
const ADAPTIVE_SYNC_STATE_DISABLED = 0 // adaptive sync is disabled
const ADAPTIVE_SYNC_STATE_ENABLED = 1 // adaptive sync is enabled
const ERROR_ALREADY_CONFIGURED_HEAD = 1 // head has been configured twice
const ERROR_ALREADY_SET = 1 // property has already been set
const ERROR_ALREADY_USED = 3 // request sent after configuration has been applied or tested
const ERROR_INVALID_ADAPTIVE_SYNC_STATE = 6 // invalid enum value used in the set_adaptive_sync request
const ERROR_INVALID_CUSTOM_MODE = 3 // mode is invalid
const ERROR_INVALID_MODE = 2 // mode doesn't belong to head
const ERROR_INVALID_SCALE = 5 // scale negative or zero
const ERROR_INVALID_TRANSFORM = 4 // transform value outside enum
const ERROR_UNCONFIGURED_HEAD = 2 // head has not been configured




// ZwlrOutputManagerV1 represents the zwlr_output_manager_v1 interface.
// This interface is a manager that allows reading and writing the current
// output device configuration.
// 
// Output devices that display pixels (e.g. a physical monitor or a virtual
// output in a window) are represented as heads. Heads cannot be created nor
// destroyed by the client, but they can be enabled or disabled and their
// properties can be changed. Each head may have one or more available modes.
// 
// Whenever a head appears (e.g. a monitor is plugged in), it will be
// advertised via the head event. Immediately after the output manager is
// bound, all current heads are advertised.
// 
// Whenever a head's properties change, the relevant wlr_output_head events
// will be sent. Not all head properties will be sent: only properties that
// have changed need to.
// 
// Whenever a head disappears (e.g. a monitor is unplugged), a
// wlr_output_head.finished event will be sent.
// 
// After one or more heads appear, change or disappear, the done event will
// be sent. It carries a serial which can be used in a create_configuration
// request to update heads properties.
// 
// The information obtained from this protocol should only be used for output
// configuration purposes. This protocol is not designed to be a generic
// output property advertisement protocol for regular clients. Instead,
// protocols such as xdg-output should be used.
type ZwlrOutputManagerV1 interface {
	// CreateConfiguration - Create a new output configuration object. This allows to update head
	CreateConfiguration(Id interface{}, Serial uint32) error
	// Stop - Indicates the client no longer wishes to receive events for output
	Stop() error

}

// ZwlrOutputHeadV1 represents the zwlr_output_head_v1 interface.
// A head is an output device. The difference between a wl_output object and
// a head is that heads are advertised even if they are turned off. A head
// object only advertises properties and cannot be used directly to change
// them.
// 
// A head has some read-only properties: modes, name, description and
// physical_size. These cannot be changed by clients.
// 
// Other properties can be updated via a wlr_output_configuration object.
// 
// Properties sent via this interface are applied atomically via the
// wlr_output_manager.done event. No guarantees are made regarding the order
// in which properties are sent.
type ZwlrOutputHeadV1 interface {
	// Release - This request indicates that the client will no longer use this head
	Release() error

}

// ZwlrOutputModeV1 represents the zwlr_output_mode_v1 interface.
// This object describes an output mode.
// 
// Some heads don't support output modes, in which case modes won't be
// advertised.
// 
// Properties sent via this interface are applied atomically via the
// wlr_output_manager.done event. No guarantees are made regarding the order
// in which properties are sent.
type ZwlrOutputModeV1 interface {
	// Release - This request indicates that the client will no longer use this mode
	Release() error

}

// ZwlrOutputConfigurationV1 represents the zwlr_output_configuration_v1 interface.
// This object is used by the client to describe a full output configuration.
// 
// First, the client needs to setup the output configuration. Each head can
// be either enabled (and configured) or disabled. It is a protocol error to
// send two enable_head or disable_head requests with the same head. It is a
// protocol error to omit a head in a configuration.
// 
// Then, the client can apply or test the configuration. The compositor will
// then reply with a succeeded, failed or cancelled event. Finally the client
// should destroy the configuration object.
type ZwlrOutputConfigurationV1 interface {
	// EnableHead - Enable a head. This request creates a head configuration object that can
	EnableHead(Id interface{}, Head interface{}) error
	// DisableHead - Disable a head.
	DisableHead(Head interface{}) error
	// Apply - Apply the new output configuration.
	Apply() error
	// Test - Test the new output configuration. The configuration won't be applied,
	Test() error
	// Destroy - Using this request a client can tell the compositor that it is not going
	Destroy() error

}

// ZwlrOutputConfigurationHeadV1 represents the zwlr_output_configuration_head_v1 interface.
// This object is used by the client to update a single head's configuration.
// 
// It is a protocol error to set the same property twice.
type ZwlrOutputConfigurationHeadV1 interface {
	// SetMode - This request sets the head's mode.
	SetMode(Mode interface{}) error
	// SetCustomMode - This request assigns a custom mode to the head. The size is given in
	SetCustomMode(Width int32, Height int32, Refresh int32) error
	// SetPosition - This request sets the head's position in the global compositor space.
	SetPosition(X int32, Y int32) error
	// SetTransform - This request sets the head's transform.
	SetTransform(Transform int32) error
	// SetScale - This request sets the head's scale.
	SetScale(Scale float64) error
	// SetAdaptiveSync - This request enables/disables adaptive sync. Adaptive sync is also
	SetAdaptiveSync(State uint32) error

}


// Error represents errors that can occur with virtual input operations.
type Error struct {
	Code    int
	Message string
}

func (e *Error) Error() string {
	return fmt.Sprintf("output_management error %d: %s", e.Code, e.Message)
}



// zwlroutputmanagerv1 is the concrete implementation of ZwlrOutputManagerV1.
type zwlroutputmanagerv1 struct {
	active bool
}

// NewZwlrOutputManagerV1 creates a new ZwlrOutputManagerV1.
func NewZwlrOutputManagerV1(ctx context.Context) (ZwlrOutputManagerV1, error) {
	// This is a stub implementation - in reality, this would:
	// 1. Connect to the Wayland display
	// 2. Get the registry
	// 3. Bind to zwlr_output_manager_v1
	// 4. Return the object
	
	return &zwlroutputmanagerv1{
		active: true,
	}, nil
}


func (obj *zwlroutputmanagerv1) CreateConfiguration(Id interface{}, Serial uint32) error {
	if !obj.active {
		return &Error{
			Code:    -1,
			Message: "object not active",
		}
	}

	// This would send the actual create_configuration request to the Wayland compositor
	return nil
}

func (obj *zwlroutputmanagerv1) Stop() error {
	if !obj.active {
		return &Error{
			Code:    -1,
			Message: "object not active",
		}
	}

	// This would send the actual stop request to the Wayland compositor
	return nil
}



// zwlroutputheadv1 is the concrete implementation of ZwlrOutputHeadV1.
type zwlroutputheadv1 struct {
	active bool
}

// NewZwlrOutputHeadV1 creates a new ZwlrOutputHeadV1.
func NewZwlrOutputHeadV1(ctx context.Context) (ZwlrOutputHeadV1, error) {
	// This is a stub implementation - in reality, this would:
	// 1. Connect to the Wayland display
	// 2. Get the registry
	// 3. Bind to zwlr_output_head_v1
	// 4. Return the object
	
	return &zwlroutputheadv1{
		active: true,
	}, nil
}


func (obj *zwlroutputheadv1) Release() error {
	if !obj.active {
		return &Error{
			Code:    -1,
			Message: "object not active",
		}
	}

	// This would send the actual release request to the Wayland compositor
	return nil
}



// zwlroutputmodev1 is the concrete implementation of ZwlrOutputModeV1.
type zwlroutputmodev1 struct {
	active bool
}

// NewZwlrOutputModeV1 creates a new ZwlrOutputModeV1.
func NewZwlrOutputModeV1(ctx context.Context) (ZwlrOutputModeV1, error) {
	// This is a stub implementation - in reality, this would:
	// 1. Connect to the Wayland display
	// 2. Get the registry
	// 3. Bind to zwlr_output_mode_v1
	// 4. Return the object
	
	return &zwlroutputmodev1{
		active: true,
	}, nil
}


func (obj *zwlroutputmodev1) Release() error {
	if !obj.active {
		return &Error{
			Code:    -1,
			Message: "object not active",
		}
	}

	// This would send the actual release request to the Wayland compositor
	return nil
}



// zwlroutputconfigurationv1 is the concrete implementation of ZwlrOutputConfigurationV1.
type zwlroutputconfigurationv1 struct {
	active bool
}

// NewZwlrOutputConfigurationV1 creates a new ZwlrOutputConfigurationV1.
func NewZwlrOutputConfigurationV1(ctx context.Context) (ZwlrOutputConfigurationV1, error) {
	// This is a stub implementation - in reality, this would:
	// 1. Connect to the Wayland display
	// 2. Get the registry
	// 3. Bind to zwlr_output_configuration_v1
	// 4. Return the object
	
	return &zwlroutputconfigurationv1{
		active: true,
	}, nil
}


func (obj *zwlroutputconfigurationv1) EnableHead(Id interface{}, Head interface{}) error {
	if !obj.active {
		return &Error{
			Code:    -1,
			Message: "object not active",
		}
	}

	// This would send the actual enable_head request to the Wayland compositor
	return nil
}

func (obj *zwlroutputconfigurationv1) DisableHead(Head interface{}) error {
	if !obj.active {
		return &Error{
			Code:    -1,
			Message: "object not active",
		}
	}

	// This would send the actual disable_head request to the Wayland compositor
	return nil
}

func (obj *zwlroutputconfigurationv1) Apply() error {
	if !obj.active {
		return &Error{
			Code:    -1,
			Message: "object not active",
		}
	}

	// This would send the actual apply request to the Wayland compositor
	return nil
}

func (obj *zwlroutputconfigurationv1) Test() error {
	if !obj.active {
		return &Error{
			Code:    -1,
			Message: "object not active",
		}
	}

	// This would send the actual test request to the Wayland compositor
	return nil
}

func (obj *zwlroutputconfigurationv1) Destroy() error {
	if !obj.active {
		return &Error{
			Code:    -1,
			Message: "object not active",
		}
	}

	// This would send the actual destroy request to the Wayland compositor
	return nil
}



// zwlroutputconfigurationheadv1 is the concrete implementation of ZwlrOutputConfigurationHeadV1.
type zwlroutputconfigurationheadv1 struct {
	active bool
}

// NewZwlrOutputConfigurationHeadV1 creates a new ZwlrOutputConfigurationHeadV1.
func NewZwlrOutputConfigurationHeadV1(ctx context.Context) (ZwlrOutputConfigurationHeadV1, error) {
	// This is a stub implementation - in reality, this would:
	// 1. Connect to the Wayland display
	// 2. Get the registry
	// 3. Bind to zwlr_output_configuration_head_v1
	// 4. Return the object
	
	return &zwlroutputconfigurationheadv1{
		active: true,
	}, nil
}


func (obj *zwlroutputconfigurationheadv1) SetMode(Mode interface{}) error {
	if !obj.active {
		return &Error{
			Code:    -1,
			Message: "object not active",
		}
	}

	// This would send the actual set_mode request to the Wayland compositor
	return nil
}

func (obj *zwlroutputconfigurationheadv1) SetCustomMode(Width int32, Height int32, Refresh int32) error {
	if !obj.active {
		return &Error{
			Code:    -1,
			Message: "object not active",
		}
	}

	// This would send the actual set_custom_mode request to the Wayland compositor
	return nil
}

func (obj *zwlroutputconfigurationheadv1) SetPosition(X int32, Y int32) error {
	if !obj.active {
		return &Error{
			Code:    -1,
			Message: "object not active",
		}
	}

	// This would send the actual set_position request to the Wayland compositor
	return nil
}

func (obj *zwlroutputconfigurationheadv1) SetTransform(Transform int32) error {
	if !obj.active {
		return &Error{
			Code:    -1,
			Message: "object not active",
		}
	}

	// This would send the actual set_transform request to the Wayland compositor
	return nil
}

func (obj *zwlroutputconfigurationheadv1) SetScale(Scale float64) error {
	if !obj.active {
		return &Error{
			Code:    -1,
			Message: "object not active",
		}
	}

	// This would send the actual set_scale request to the Wayland compositor
	return nil
}

func (obj *zwlroutputconfigurationheadv1) SetAdaptiveSync(State uint32) error {
	if !obj.active {
		return &Error{
			Code:    -1,
			Message: "object not active",
		}
	}

	// This would send the actual set_adaptive_sync request to the Wayland compositor
	return nil
}


